#!/usr/bin/python
import sys
import numpy as np
import os
import __main__ as main


import pyProbeParticle                as PPU     
from   pyProbeParticle            import basUtils
from   pyProbeParticle            import elements   
import pyProbeParticle.GridUtils      as GU
#import pyProbeParticle.core          as PPC
import pyProbeParticle.HighLevel      as PPH
import pyProbeParticle.fieldFFT       as fFFT

HELP_MSG="""Use this program in the following way:
"""+os.path.basename(main.__file__) +""" -i <filename> [ --sigma <value> ]

Supported file formats are:
   * cube
   * xsf """

from optparse import OptionParser

parser = OptionParser()
parser.add_option( "-i", "--input", action="store", type="string", help="format of input file")
parser.add_option( "-t", "--tip",   action="store", type="string", help="tip model (multipole)"      , default='None')
parser.add_option( "-w", "--sigma", action="store", type="float",  help="gaussian width for convolution in Electrostatics [Angstroem]", default=-1.0)
parser.add_option( "--npy" , action="store_true" ,  help="load and save fields in npy instead of xsf", default=False)
parser.add_option( "--tip_base",    action="store", type="string", help="tip_base model (multipole)" , default='None')
(options, args) = parser.parse_args()

print options
if options.npy:
    data_format ="npy"
else:
    data_format ="xsf"

if options.input==None:
    sys.exit("ERROR!!! Please, specify the input file with the '-i' option \n\n"+HELP_MSG)

print " >> OVEWRITING SETTINGS by params.ini  "
PPU.loadParams( 'params.ini' )

print " ========= get electrostatic forcefiled from hartree "

# TODO with time implement reading a hartree potential generated by different software
print " loading Hartree potential from disk "
if(options.input.lower().endswith(".xsf") ):
    print "Use loadXSF"
    V, lvec, nDim, head = GU.loadXSF(options.input)
elif(options.input.lower().endswith(".cube") ):
    print "Use loadCUBE"
    V, lvec, nDim, head = GU.loadCUBE(options.input)
    V*=27.211396132
else:
    sys.exit("ERROR!!! Unknown format of the input file\n\n"+HELP_MSG)
rho = None
sigma = options.sigma if ( options.sigma > 0.0) else PPU.params['sigma']
multipole = None

if (options.tip.endswith(".xsf") or options.tip.endswith(".cube") ) :
    rho, lvec_tip, nDim_tip, tiphead = GU.loadXSF(options.tip) if (options.tip.endswith(".xsf")) else GU.loadCUBE(options.tip)
    if (nDim_tip != nDim):
        sys.exit("Error: Input file for tip charge density has been specified, but the dimensions are incompatible with the Hartree potential file!")    
else:
    multipole = {options.tip:1.0} if ( options.tip in {'s','px','py','pz','dx2','dy2','dz2','dxy','dxz','dyz'} ) else {PPU.params['tip']:1.0}

print " computing convolution with tip by FFT "
Fel_x,Fel_y,Fel_z = fFFT.potential2forces(V, lvec, nDim, rho=rho, sigma = sigma, multipole = multipole); del rho, multipole;
FFel = GU.packVecGrid(Fel_x,Fel_y,Fel_z); del Fel_x,Fel_y,Fel_z;

print " saving electrostatic forcefield "
GU.save_vec_field("FFel",FFel,lvec,data_format=data_format); del FFel;

tip_base = options.tip_base if ( options.tip_base is not 'None') else PPU.params["tip_base"][0]

if ((tip_base  != 'None') and (tip_base != None)):
    print " CALCULATING z-force-field for tip_base mono-/multipole "
    print " chosen tip_base multipole: ", tip_base
    print " computing convolution with tip_base by FFT "
    rho = None
    Fel_x,Fel_y,Fel_z = fFFT.potential2forces(V, lvec, nDim, rho=rho, sigma = sigma, multipole = {tip_base:1.0} ); del rho;
    #FFel = GU.packVecGrid(Fel_x,Fel_y,Fel_z)
    print " saving z-electrostatic forcefield of the tip_base"
    GU.save_scal_field("FFel_tip",Fel_z,lvec,data_format=data_format)
    del Fel_x,Fel_y,Fel_z,V;
else:
    del V;
